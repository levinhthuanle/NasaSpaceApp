"use client"
import { useState, useEffect, useRef } from "react"
import { MessageCircle, Send, X } from "lucide-react"

export interface ChatMessage {
    id: number
    text: string
    sender: "user" | "bot"
    timestamp: Date
}

interface ChatbotProps {
    isOpen: boolean
    onToggle: () => void
}

export default function Chatbot({ isOpen, onToggle }: ChatbotProps) {
    const [messages, setMessages] = useState<ChatMessage[]>([
        {
            id: 1,
            text: "Ch√†o b·∫°n! T√¥i l√† Bloom Assistant üå∏ T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m hi·ªÉu v·ªÅ th·ªùi gian n·ªü hoa c·ªßa c√°c lo√†i hoa ·ªü Vi·ªát Nam. H√£y h·ªèi t√¥i b·∫•t c·ª© ƒëi·ªÅu g√¨!",
            sender: "bot",
            timestamp: new Date()
        }
    ])
    const [currentMessage, setCurrentMessage] = useState("")
    const [isTyping, setIsTyping] = useState(false)
    const chatEndRef = useRef<HTMLDivElement>(null)

    // Auto scroll to bottom when new messages arrive
    useEffect(() => {
        if (chatEndRef.current) {
            chatEndRef.current.scrollIntoView({ behavior: "smooth" })
        }
    }, [messages])

    const generateBotResponse = (userMessage: string): string => {
        const message = userMessage.toLowerCase()

        // Responses about specific flowers
        if (message.includes("anh ƒë√†o") || message.includes("cherry")) {
            return "üå∏ Hoa anh ƒë√†o th∆∞·ªùng n·ªü t·ª´ gi·ªØa th√°ng 3 ƒë·∫øn ƒë·∫ßu th√°ng 4. Hi·ªán t·∫°i x√°c su·∫•t n·ªü ·ªü H√† N·ªôi l√† 85%. B·∫°n c√≥ th·ªÉ t√¨m th·∫•y ch√∫ng t·∫°i C√¥ng vi√™n Th·ªëng Nh·∫•t!"
        }

        if (message.includes("ban")) {
            return "ü§ç Hoa ban n·ªü r·ªô t·ª´ ƒë·∫ßu ƒë·∫øn cu·ªëi th√°ng 3 ·ªü cao nguy√™n ƒêi·ªán Bi√™n v·ªõi x√°c su·∫•t 95%. ƒê√¢y l√† th·ªùi ƒëi·ªÉm ƒë·∫πp nh·∫•t ƒë·ªÉ ng·∫Øm hoa ban tr·∫Øng tinh kh√¥i!"
        }

        if (message.includes("ƒë·ªó quy√™n")) {
            return "üå∫ Hoa ƒë·ªó quy√™n ƒëang n·ªü ƒë·∫πp nh·∫•t ·ªü Sa Pa t·ª´ cu·ªëi th√°ng 2 ƒë·∫øn gi·ªØa th√°ng 3 v·ªõi x√°c su·∫•t 98%. M√†u ƒë·ªè r·ª±c r·ª° tr√™n n√∫i cao r·∫•t ƒë√°ng ng·∫Øm!"
        }

        if (message.includes("mai")) {
            return "üåº Hoa mai v√†ng n·ªü v√†o d·ªãp T·∫øt t·ª´ cu·ªëi th√°ng 1 ƒë·∫øn cu·ªëi th√°ng 2. Hi·ªán t·∫°i x√°c su·∫•t n·ªü ·ªü TP.HCM l√† 45%."
        }

        if (message.includes("ph∆∞·ª£ng")) {
            return "üî• Hoa ph∆∞·ª£ng n·ªü t·ª´ gi·ªØa th√°ng 4 ƒë·∫øn cu·ªëi th√°ng 6. Hi·ªán t·∫°i c√≤n s·ªõm n√™n x√°c su·∫•t n·ªü ·ªü ƒê√† N·∫µng ch·ªâ 20%."
        }

        if (message.includes("sen")) {
            return "ü™∑ Hoa sen c√≥ m√πa n·ªü d√†i t·ª´ gi·ªØa th√°ng 5 ƒë·∫øn cu·ªëi th√°ng 8. ƒê·∫ßm sen Tam C·ªëc, Ninh B√¨nh l√† ƒë·ªãa ƒëi·ªÉm l√Ω t∆∞·ªüng!"
        }

        if (message.includes("s√∫ng")) {
            return "üå∏ Hoa s√∫ng n·ªü t·ª´ ƒë·∫ßu th√°ng 4 ƒë·∫øn gi·ªØa th√°ng 5 t·∫°i ƒê·ªìng Th√°p M∆∞·ªùi v·ªõi x√°c su·∫•t 70%. C·∫£nh hoa s√∫ng tr·∫Øng n·ªü tr√™n ƒë·ªìng ru·ªông r·∫•t th∆° m·ªông!"
        }

        if (message.includes("ƒë√†o")) {
            return "üå∫ Hoa ƒë√†o h·ªìng n·ªü r·ªô d·ªãp T·∫øt t·ª´ cu·ªëi th√°ng 1 ƒë·∫øn gi·ªØa th√°ng 2. Thung l≈©ng Mai Ch√¢u, H√≤a B√¨nh hi·ªán c√≥ x√°c su·∫•t n·ªü 35%."
        }

        // General questions
        if (message.includes("khi n√†o") || message.includes("th·ªùi gian")) {
            return "‚è∞ T√¥i c√≥ th·ªÉ cho b·∫°n bi·∫øt th·ªùi gian n·ªü c·ªßa t·ª´ng lo√†i hoa c·ª• th·ªÉ. H√£y h·ªèi v·ªÅ: hoa anh ƒë√†o, hoa ban, ƒë·ªó quy√™n, mai, ph∆∞·ª£ng, sen, s√∫ng, ƒë√†o... B·∫°n mu·ªën bi·∫øt v·ªÅ lo√†i n√†o?"
        }

        if (message.includes("·ªü ƒë√¢u") || message.includes("ƒë·ªãa ƒëi·ªÉm")) {
            return "üìç T√¥i c√≥ th√¥ng tin v·ªÅ ƒë·ªãa ƒëi·ªÉm ng·∫Øm hoa t·∫°i nhi·ªÅu t·ªânh th√†nh. B·∫°n c√≥ th·ªÉ xem c√°c marker tr√™n b·∫£n ƒë·ªì ho·∫∑c h·ªèi t√¥i v·ªÅ ƒë·ªãa ƒëi·ªÉm c·ª• th·ªÉ cho t·ª´ng lo√†i hoa!"
        }

        if (message.includes("x√°c su·∫•t") || message.includes("t·ª∑ l·ªá")) {
            return "üìä T√¥i c√≥ th√¥ng tin x√°c su·∫•t n·ªü hoa theo th·ªùi gian th·ª±c. Hi·ªán t·∫°i: ƒê·ªó quy√™n 98%, Ban 95%, Anh ƒë√†o 85%, S√∫ng 70%, Mai 45%, ƒê√†o 35%, Ph∆∞·ª£ng 20%, Sen 15%"
        }

        if (
            message.includes("xin ch√†o") ||
            message.includes("hello") ||
            message.includes("hi") ||
            message.includes("ch√†o")
        ) {
            return "Xin ch√†o! üëã T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m hi·ªÉu v·ªÅ th·ªùi gian v√† ƒë·ªãa ƒëi·ªÉm ng·∫Øm hoa ·ªü Vi·ªát Nam. B·∫°n mu·ªën h·ªèi v·ªÅ lo√†i hoa n√†o?"
        }

        if (message.includes("c·∫£m ∆°n") || message.includes("thank")) {
            return "R·∫•t vui ƒë∆∞·ª£c gi√∫p b·∫°n! üòä N·∫øu b·∫°n c√≥ th√™m c√¢u h·ªèi n√†o v·ªÅ hoa hay mu·ªën bi·∫øt th√™m th√¥ng tin, ƒë·ª´ng ng·∫ßn ng·∫°i h·ªèi t√¥i nh√©!"
        }

        // Default response
        return "ü§î T√¥i hi·ªÉu b·∫°n quan t√¢m v·ªÅ hoa! T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m hi·ªÉu v·ªÅ:\n‚Ä¢ Th·ªùi gian n·ªü hoa üïê\n‚Ä¢ ƒê·ªãa ƒëi·ªÉm ng·∫Øm hoa üìç\n‚Ä¢ X√°c su·∫•t n·ªü hi·ªán t·∫°i üìä\n‚Ä¢ C√°c lo√†i: anh ƒë√†o, ban, ƒë·ªó quy√™n, mai, ph∆∞·ª£ng, sen...\n\nB·∫°n mu·ªën h·ªèi v·ªÅ ƒëi·ªÅu g√¨ c·ª• th·ªÉ?"
    }

    const handleSendMessage = () => {
        if (!currentMessage.trim()) return

        const newUserMessage: ChatMessage = {
            id: Date.now(),
            text: currentMessage,
            sender: "user",
            timestamp: new Date()
        }

        setMessages((prev) => [...prev, newUserMessage])
        setCurrentMessage("")
        setIsTyping(true)

        // Simulate bot typing and response
        setTimeout(() => {
            setIsTyping(false)
            const botResponse = generateBotResponse(currentMessage)
            const newBotMessage: ChatMessage = {
                id: Date.now() + 1,
                text: botResponse,
                sender: "bot",
                timestamp: new Date()
            }
            setMessages((prev) => [...prev, newBotMessage])
        }, 1500)
    }

    const handleKeyPress = (e: React.KeyboardEvent) => {
        if (e.key === "Enter" && !e.shiftKey) {
            e.preventDefault()
            handleSendMessage()
        }
    }

    if (!isOpen) {
        return (
            <button
                onClick={onToggle}
                className="w-14 h-14 bg-gradient-to-br from-blue-500 to-blue-600 text-white rounded-full shadow-lg hover:shadow-xl hover:scale-105 transition-all duration-200 flex items-center justify-center group relative"
                title="M·ªü Bloom Assistant"
            >
                <MessageCircle size={24} />
                {/* Online indicator */}
                <div className="absolute -top-1 -right-1 w-4 h-4 bg-green-400 rounded-full border-2 border-white animate-pulse"></div>
                {/* Tooltip */}
                <div className="absolute bottom-16 right-0 bg-gray-800 text-white text-xs px-2 py-1 rounded opacity-0 group-hover:opacity-100 transition-opacity whitespace-nowrap">
                    Bloom Assistant
                </div>
            </button>
        )
    }

    return (
        <div className="text-black w-80 h-[500px] bg-white rounded-xl shadow-2xl border border-gray-200 flex flex-col overflow-hidden">
            {/* Header */}
            <div className="bg-gradient-to-r from-blue-500 to-blue-600 text-white p-4 flex justify-between items-center">
                <div className="flex items-center gap-3">
                    <div className="w-10 h-10 bg-white bg-opacity-20 rounded-full flex items-center justify-center text-lg">
                        üå∏
                    </div>
                    <div>
                        <div className="font-semibold">Bloom Assistant</div>
                        <div className="text-xs opacity-90 flex items-center gap-1">
                            <div className="w-2 h-2 bg-green-400 rounded-full"></div>
                            ƒêang online
                        </div>
                    </div>
                </div>
                <button
                    onClick={onToggle}
                    className="text-white hover:bg-white hover:bg-opacity-20 rounded-full p-2 transition-colors"
                >
                    <X size={18} />
                </button>
            </div>

            {/* Messages */}
            <div className="flex-1 overflow-y-auto p-4 space-y-4 bg-gray-50">
                {messages.map((message) => (
                    <div
                        key={message.id}
                        className={`flex ${
                            message.sender === "user"
                                ? "justify-end"
                                : "justify-start"
                        }`}
                    >
                        <div
                            className={`max-w-xs px-4 py-2 rounded-2xl text-sm ${
                                message.sender === "user"
                                    ? "bg-blue-500 text-white rounded-br-md"
                                    : "bg-white text-gray-800 rounded-bl-md shadow-sm border"
                            }`}
                        >
                            <div className="whitespace-pre-wrap">
                                {message.text}
                            </div>
                            <div
                                className={`text-xs mt-1 ${
                                    message.sender === "user"
                                        ? "text-blue-100"
                                        : "text-gray-500"
                                }`}
                            >
                                {message.timestamp.toLocaleTimeString([], {
                                    hour: "2-digit",
                                    minute: "2-digit"
                                })}
                            </div>
                        </div>
                    </div>
                ))}

                {/* Typing indicator */}
                {isTyping && (
                    <div className="flex justify-start">
                        <div className="bg-white text-gray-800 rounded-2xl rounded-bl-md shadow-sm border px-4 py-3">
                            <div className="flex space-x-1">
                                <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                                <div
                                    className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"
                                    style={{ animationDelay: "0.1s" }}
                                ></div>
                                <div
                                    className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"
                                    style={{ animationDelay: "0.2s" }}
                                ></div>
                            </div>
                        </div>
                    </div>
                )}
                <div ref={chatEndRef} />
            </div>

            {/* Input */}
            <div className="p-4 border-t border-gray-200 bg-white">
                <div className="flex gap-2">
                    <input
                        type="text"
                        value={currentMessage}
                        onChange={(e) => setCurrentMessage(e.target.value)}
                        onKeyPress={handleKeyPress}
                        placeholder="H·ªèi v·ªÅ th·ªùi gian n·ªü hoa..."
                        className="flex-1 px-4 py-3 text-sm border border-gray-300 rounded-full focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                        disabled={isTyping}
                    />
                    <button
                        onClick={handleSendMessage}
                        disabled={!currentMessage.trim() || isTyping}
                        className="px-4 py-3 bg-blue-500 text-white rounded-full hover:bg-blue-600 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
                    >
                        <Send size={16} />
                    </button>
                </div>
            </div>
        </div>
    )
}
